#include "pokemon.h"

//*********************************************************************************
// pallette
//*********************************************************************************
// this needs to be decieded if it's one set palette or diff palette for each map
//
//*********************************************************************************

const unsigned short bg0_palette[256] = {
0x741f, 0x314b, 0x5585, 0x39ad, 0x358e, 0x35ad, 0x35ae, 0x5de7, 
0x3dcd, 0x3dce, 0x1227, 0x1228, 0x65e9, 0x69ca, 0x1647, 0x41ee, 
0x2e62, 0x3261, 0x260f, 0x3681, 0x3a80, 0x3282, 0x2a10, 0x2a11, 
0x1e13, 0x662c, 0x2a31, 0x4212, 0x4211, 0x6e49, 0x4231, 0x2e31, 
0x4632, 0x7269, 0x42a6, 0x46c7, 0x726f, 0x3ec8, 0x6e8c, 0x46c9, 
0x42c9, 0x4690, 0x468f, 0x46ca, 0x2a77, 0x42cb, 0x4ab0, 0x5a92, 
0x2e78, 0x4acb, 0x7e90, 0x3297, 0x4e76, 0x4aeb, 0x4aaf, 0x2e99, 
0x2e98, 0x3298, 0x4eb4, 0x4e96, 0x5eb3, 0x4eb5, 0x530b, 0x4eb6, 
0x530c, 0x62b4, 0x32b9, 0x4f0d, 0x4f0c, 0x66d3, 0x52d5, 0x532c, 
0x62d3, 0x52d6, 0x4b2c, 0x532d, 0x4f2c, 0x62d5, 0x62d4, 0x572d, 
0x4f2d, 0x66d5, 0x4f2e, 0x572c, 0x46f7, 0x532e, 0x5b2f, 0x66f6, 
0x66f5, 0x532f, 0x574d, 0x46da, 0x5b30, 0x6af4, 0x534e, 0x52f8, 
0x4af8, 0x42fb, 0x3ef9, 0x6af6, 0x42f9, 0x3efa, 0x4319, 0x46fa, 
0x4b18, 0x6717, 0x5751, 0x3efc, 0x431a, 0x5b50, 0x5f70, 0x6f36, 
0x471b, 0x6b38, 0x5f38, 0x5f71, 0x5374, 0x4f74, 0x5f39, 0x5f3a, 
0x5375, 0x6b37, 0x535a, 0x6392, 0x5774, 0x6f58, 0x5f92, 0x5f73, 
0x6393, 0x5395, 0x5f94, 0x4f76, 0x7359, 0x635a, 0x5397, 0x535b, 
0x5396, 0x4f7b, 0x6795, 0x4f98, 0x677a, 0x537b, 0x4f7c, 0x67b3, 
0x4f97, 0x577b, 0x7779, 0x537d, 0x6796, 0x7b79, 0x677b, 0x577c, 
0x479c, 0x67b6, 0x6bb6, 0x439d, 0x479d, 0x739a, 0x6bb7, 0x579c, 
0x67b7, 0x439e, 0x6b9b, 0x6bb8, 0x6f9b, 0x6b9c, 0x739b, 0x579d, 
0x439f, 0x779b, 0x6f9d, 0x6f9c, 0x779c, 0x47be, 0x73bb, 0x77bb, 
0x77bc, 0x73bc, 0x77bd, 0x7bbd, 0x77dd, 0x7fde, 0x7fff, 0x7ffe, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

const unsigned short bg1_palette[256] = {

0x741f, 0x0000, 0x30c4, 0x2cc6, 0x30c5, 0x14e8, 0x30c7, 0x30e6, 
0x1475, 0x2ce5, 0x34e5, 0x2ce6, 0x1ccb, 0x2ce7, 0x28e7, 0x30e7, 
0x3106, 0x2cea, 0x3506, 0x30e8, 0x3507, 0x2d07, 0x3107, 0x3108, 
0x2908, 0x3527, 0x3128, 0x2909, 0x2d0b, 0x3928, 0x310b, 0x0567, 
0x252a, 0x4546, 0x312a, 0x1cd8, 0x3529, 0x28f1, 0x352a, 0x3548, 
0x3549, 0x3949, 0x250f, 0x4547, 0x314a, 0x4946, 0x392c, 0x314b, 
0x394a, 0x354a, 0x354b, 0x394b, 0x492d, 0x5184, 0x396a, 0x356b, 
0x4d69, 0x4d4e, 0x2589, 0x514e, 0x398b, 0x318e, 0x1d8e, 0x19ae, 
0x318d, 0x213a, 0x2139, 0x2dae, 0x3174, 0x213b, 0x1d3c, 0x45c8, 
0x69c6, 0x71e5, 0x19d0, 0x31b2, 0x49e8, 0x6de6, 0x55c9, 0x59e8, 
0x45cd, 0x5de9, 0x59e9, 0x1647, 0x3dce, 0x5e08, 0x6208, 0x41ee, 
0x3dee, 0x4e0a, 0x41ef, 0x2dd3, 0x3def, 0x3df0, 0x6209, 0x41f0, 
0x3282, 0x2dba, 0x2df3, 0x31bc, 0x522b, 0x6e0b, 0x2df4, 0x2dbc, 
0x2dbe, 0x3284, 0x3df6, 0x2ea3, 0x762b, 0x2ec2, 0x6613, 0x2235, 
0x6614, 0x564c, 0x6a6a, 0x724b, 0x2254, 0x6a15, 0x1e35, 0x6a14, 
0x766b, 0x6e6a, 0x7a4d, 0x361c, 0x2258, 0x6a35, 0x7a6b, 0x4a38, 
0x6a8a, 0x6e8b, 0x6a8c, 0x2276, 0x4256, 0x766d, 0x1e77, 0x6eaa, 
0x4290, 0x728c, 0x6aab, 0x5e8e, 0x5a92, 0x3a3d, 0x72ac, 0x1e95, 
0x42b1, 0x42b0, 0x62ae, 0x2e96, 0x46b1, 0x1eb6, 0x5eb3, 0x5ab2, 
0x32b7, 0x4b29, 0x2eb7, 0x4ad2, 0x76ee, 0x1ed7, 0x4b49, 0x4b2b, 
0x46b8, 0x36d9, 0x2ed8, 0x4af3, 0x4b4a, 0x532d, 0x7e9a, 0x7e99, 
0x4b12, 0x46d9, 0x4b69, 0x66f5, 0x2f50, 0x36fa, 0x7eba, 0x7b0e, 
0x32fa, 0x46da, 0x6b11, 0x7ebb, 0x6b12, 0x4319, 0x7f4d, 0x6b17, 
0x7732, 0x6b16, 0x4efb, 0x431a, 0x1f3b, 0x6f36, 0x7f51, 0x371e, 
0x4f1b, 0x7f32, 0x3b3b, 0x433a, 0x5b36, 0x7b53, 0x7f52, 0x433b, 
0x1f5c, 0x5f57, 0x7f53, 0x6739, 0x431f, 0x1b5d, 0x7f73, 0x7358, 
0x7759, 0x7f74, 0x635c, 0x4b7c, 0x7f94, 0x7359, 0x4f7b, 0x437c, 
0x6b5b, 0x6f5c, 0x779a, 0x777b, 0x439e, 0x43f7, 0x63bd, 0x7bdc, 
0x7fdd, 0x7fde, 0x7bdf, 0x7fff, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};



const unsigned short bg2_palette[256] = {

0x741f, 0x0000, 0x30c4, 0x2cc6, 0x30c5, 0x14e8, 0x30c7, 0x30e6, 
0x1475, 0x2ce5, 0x34e5, 0x2ce6, 0x1ccb, 0x2ce7, 0x28e7, 0x30e7, 
0x3106, 0x2cea, 0x3506, 0x30e8, 0x3507, 0x2d07, 0x3107, 0x3108, 
0x2908, 0x3527, 0x3128, 0x2909, 0x2d0b, 0x3928, 0x310b, 0x0567, 
0x252a, 0x4546, 0x312a, 0x1cd8, 0x3529, 0x28f1, 0x352a, 0x3548, 
0x3549, 0x3949, 0x250f, 0x4547, 0x314a, 0x4946, 0x392c, 0x314b, 
0x394a, 0x354a, 0x354b, 0x394b, 0x492d, 0x5184, 0x396a, 0x356b, 
0x4d69, 0x4d4e, 0x2589, 0x514e, 0x398b, 0x318e, 0x1d8e, 0x19ae, 
0x318d, 0x213a, 0x2139, 0x2dae, 0x3174, 0x213b, 0x1d3c, 0x45c8, 
0x69c6, 0x71e5, 0x19d0, 0x31b2, 0x49e8, 0x6de6, 0x55c9, 0x59e8, 
0x45cd, 0x5de9, 0x59e9, 0x1647, 0x3dce, 0x5e08, 0x6208, 0x41ee, 
0x3dee, 0x4e0a, 0x41ef, 0x2dd3, 0x3def, 0x3df0, 0x6209, 0x41f0, 
0x3282, 0x2dba, 0x2df3, 0x31bc, 0x522b, 0x6e0b, 0x2df4, 0x2dbc, 
0x2dbe, 0x3284, 0x3df6, 0x2ea3, 0x762b, 0x2ec2, 0x6613, 0x2235, 
0x6614, 0x564c, 0x6a6a, 0x724b, 0x2254, 0x6a15, 0x1e35, 0x6a14, 
0x766b, 0x6e6a, 0x7a4d, 0x361c, 0x2258, 0x6a35, 0x7a6b, 0x4a38, 
0x6a8a, 0x6e8b, 0x6a8c, 0x2276, 0x4256, 0x766d, 0x1e77, 0x6eaa, 
0x4290, 0x728c, 0x6aab, 0x5e8e, 0x5a92, 0x3a3d, 0x72ac, 0x1e95, 
0x42b1, 0x42b0, 0x62ae, 0x2e96, 0x46b1, 0x1eb6, 0x5eb3, 0x5ab2, 
0x32b7, 0x4b29, 0x2eb7, 0x4ad2, 0x76ee, 0x1ed7, 0x4b49, 0x4b2b, 
0x46b8, 0x36d9, 0x2ed8, 0x4af3, 0x4b4a, 0x532d, 0x7e9a, 0x7e99, 
0x4b12, 0x46d9, 0x4b69, 0x66f5, 0x2f50, 0x36fa, 0x7eba, 0x7b0e, 
0x32fa, 0x46da, 0x6b11, 0x7ebb, 0x6b12, 0x4319, 0x7f4d, 0x6b17, 
0x7732, 0x6b16, 0x4efb, 0x431a, 0x1f3b, 0x6f36, 0x7f51, 0x371e, 
0x4f1b, 0x7f32, 0x3b3b, 0x433a, 0x5b36, 0x7b53, 0x7f52, 0x433b, 
0x1f5c, 0x5f57, 0x7f53, 0x6739, 0x431f, 0x1b5d, 0x7f73, 0x7358, 
0x7759, 0x7f74, 0x635c, 0x4b7c, 0x7f94, 0x7359, 0x4f7b, 0x437c, 
0x6b5b, 0x6f5c, 0x779a, 0x777b, 0x439e, 0x43f7, 0x63bd, 0x7bdc, 
0x7fdd, 0x7fde, 0x7bdf, 0x7fff, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};



	const unsigned short bg3_palette[256] = {
0x0000, 0x7fff, 0x0000, 0x001f, 0x7fe0, 0x03e0, 0x03ff, 0x000f, 
0x3c0f, 0x3c00, 0x3de0, 0x01e0, 0x01f0, 0x318c, 0x5800, 0x00a0, 
0x0011, 0x38a4, 0x18c5, 0x00ca, 0x0492, 0x24ca, 0x14cd, 0x10b3, 
0x60e6, 0x4522, 0x00ef, 0x18d1, 0x2909, 0x2527, 0x2128, 0x5524, 
0x3529, 0x01a0, 0x092d, 0x152c, 0x00d9, 0x1cf5, 0x1cd9, 0x745f, 
0x00df, 0x69a0, 0x1d6e, 0x151a, 0x2119, 0x396d, 0x69a4, 0x0d90, 
0x498c, 0x211d, 0x213b, 0x5172, 0x39ca, 0x35cb, 0x41ae, 0x213f, 
0x61c9, 0x2241, 0x39cd, 0x2dcf, 0x19ef, 0x09d4, 0x15d3, 0x295f, 
0x1e0c, 0x55ce, 0x3ded, 0x220e, 0x02a0, 0x45ef, 0x1df3, 0x5e0b, 
0x720a, 0x5db6, 0x419e, 0x51f4, 0x4df5, 0x01fc, 0x424e, 0x2235, 
0x6631, 0x0657, 0x466f, 0x7a6c, 0x39ff, 0x02ea, 0x2a1f, 0x6e70, 
0x22e9, 0x421f, 0x4e74, 0x5e57, 0x1e5f, 0x5a94, 0x6a77, 0x22f0, 
0x765a, 0x56b3, 0x169c, 0x12f3, 0x069f, 0x5eb5, 0x72d0, 0x36b9, 
0x3ab9, 0x7f60, 0x4ef2, 0x6a9a, 0x5a7f, 0x5ad6, 0x6b2b, 0x62d6, 
0x1edc, 0x2adb, 0x56d8, 0x56f5, 0x3adc, 0x5af6, 0x6ed9, 0x02ff, 
0x62f7, 0x4f33, 0x3afc, 0x7f13, 0x42df, 0x2b54, 0x4371, 0x6edf, 
0x631a, 0x6337, 0x7737, 0x433d, 0x473d, 0x275d, 0x17d1, 0x17ee, 
0x733b, 0x2b5f, 0x435d, 0x773c, 0x6f5a, 0x6b5b, 0x6f5b, 0x6f79, 
0x039f, 0x2b7f, 0x03d9, 0x737b, 0x7f5f, 0x4b9f, 0x03df, 0x539f, 
0x7fb8, 0x739d, 0x1bde, 0x779d, 0x3ff8, 0x47bf, 0x7bbc, 0x3bdf, 
0x17ff, 0x7fdc, 0x53fd, 0x7bdd, 0x4bff, 0x53ff, 0x63ff, 0x7bff, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

// Load palette ** TO BE EXPANDED INTO MORE DYNAMIC SETUP
	//
void palette_load(){

		//THIS IS FOR EXTENDED PALETTE
		// unlock extended palette for writing
		vramSetBankF(VRAM_F_LCD);
		vramSetBankG(VRAM_G_LCD);
 
		// Copy our palette over
		dmaCopy(bg0_palette, (u16*)(VRAM_F + (0 << 12) + (0 << 8)), sizeof(bg0_palette)); // base tile palette
		dmaCopy(bg1_palette, (u16*)(VRAM_F + (1 << 12) + (0 << 8)), sizeof(bg1_palette)); // tile palette
		dmaCopy(bg2_palette, (u16*)(VRAM_F + (2 << 12) + (0 << 8)), sizeof(bg2_palette)); // tile palette
		dmaCopy(bg3_palette, (u16*)(VRAM_F + (3 << 12) + (0 << 8)), sizeof(bg3_palette)); // textbox palette
 
		// Lock back to extended palette
		vramSetBankF(VRAM_F_BG_EXT_PALETTE_SLOT01);
		vramSetBankG(VRAM_G_BG_EXT_PALETTE_SLOT23);	
};
